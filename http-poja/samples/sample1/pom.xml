<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>io.micronaut.samples</groupId>
    <artifactId>http-poja-sample1</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>${project.artifactId}</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <jdk.version>21</jdk.version>
        <micronaut.core.version>4.4.3</micronaut.core.version>
        <micronaut.serialization.version>2.9.0</micronaut.serialization.version>
        <native.maven.plugin.version>0.10.2</native.maven.plugin.version>
        <mainClass>io.micronaut.http.poja.sample1.Application</mainClass>
        <nativeDryRun>false</nativeDryRun>
        <!-- speeds yp native image build by not inlining methods -->
        <quickBuild>true</quickBuild>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>io.micronaut.platform</groupId>
                <artifactId>micronaut-platform</artifactId>
                <version>4.4.2</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>io.micronaut.servlet</groupId>
                <artifactId>micronaut-http-poja</artifactId>
                <version>4.2.0-SNAPSHOT</version>
            </dependency>
        </dependencies>

    </dependencyManagement>
    <dependencies>
        <!-- micronaut begin -->
        <dependency>
            <groupId>io.micronaut</groupId>
            <artifactId>micronaut-inject</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micronaut.serde</groupId>
            <artifactId>micronaut-serde-jackson</artifactId>
        </dependency>
        <dependency>
            <groupId>io.micronaut.servlet</groupId>
            <artifactId>micronaut-http-poja</artifactId>
        </dependency>
        <!-- Micronaut uses slf4j. Let's add an slf4j provider to get logging working. -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
        </dependency>

        <!-- micronaut end -->

        <!-- test dependency begin-->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.10.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.10.2</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.14</version>
            <scope>test</scope>
        </dependency>
        <!-- test dependency end-->
    </dependencies>
    <build>
        <extensions>
            <!-- useful to generate a OS family variable. see https://github.com/trustin/os-maven-plugin -->
            <extension>
                <groupId>kr.motd.maven</groupId>
                <artifactId>os-maven-plugin</artifactId>
                <version>1.7.0</version>
            </extension>
        </extensions>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>io.micronaut.maven</groupId>
                <artifactId>micronaut-maven-plugin</artifactId>
                <configuration>
                    <configFile>aot-${packaging}.properties</configFile>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>17</source>
                    <target>17</target>
                    <useModulePath>true</useModulePath>
                    <annotationProcessorPaths combine.children="append">
                        <!-- This is needed for micronaut to discover beans -->
                        <path>
                            <groupId>io.micronaut</groupId>
                            <artifactId>micronaut-inject-java</artifactId>
                            <version>${micronaut.core.version}</version>
                        </path>
                        <!-- This is needed for micronaut serialization to work. -->
                        <path>
                            <groupId>io.micronaut.serde</groupId>
                            <artifactId>micronaut-serde-processor</artifactId>
                            <version>${micronaut.serialization.version}</version>
                            <exclusions>
                                <exclusion>
                                    <groupId>io.micronaut</groupId>
                                    <artifactId>micronaut-inject</artifactId>
                                </exclusion>
                            </exclusions>
                        </path>
                    </annotationProcessorPaths>
                    <annotationProcessorPathsUseDepMgmt>true</annotationProcessorPathsUseDepMgmt>
                    <compilerArgs>
                        <arg>-Amicronaut.processing.group=sahoo.graalos.progmodel.mn</arg>
                        <arg>-Amicronaut.processing.module=default</arg>
                    </compilerArgs>
                </configuration>
            </plugin>
            <!--
            We copy all dependencies to target/lib so that we can copy
            all of them into an docker image and run the final artifact
            without a maven local repository.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.8</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <includeScope>runtime</includeScope>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!--
            We create a jar with proper manifest metadata such that
            it can be run using java -jar.
            -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>${mainClass}</mainClass>
                            <addClasspath>true</addClasspath>
                            <classpathPrefix>lib/</classpathPrefix>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.graalvm.buildtools</groupId>
                <artifactId>native-maven-plugin</artifactId>
                <version>${native.maven.plugin.version}</version>
                <configuration>
                    <!-- https://github.com/trustin/os-maven-plugin#generated-properties for os.detected.classifier -->
                    <imageName>${artifactId}-${os.detected.classifier}-${version}</imageName>
                    <fallback>false</fallback>
                    <!-- many useful options are not directly exposed by the plugin, so this is our alternative -->
                    <buildArgs>
                        <!-- one of G1, serial (default), and epsilon -->
                        <buildArg>--gc=serial</buildArg>
                        <!--
                         The install-exit-handlers option gives you the same signal handlers that a JVM does.
                         This enables us to dump threa stack using kill -3 for example.
                        -->
                        <buildArg>--install-exit-handlers</buildArg>
                        <!-- TODO: add options for dumping stack and heap-->
                    </buildArgs>
                    <dryRun>${nativeDryRun}</dryRun>
                    <!-- method inlining is disabled when quickBuild is true and saves around 20% time. -->
                    <quickBuild>${quickBuild}</quickBuild>
					<verbose>true</verbose>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>

